@page "/calculator"
@using System.Linq
@inject Blazor.Extensions.Storage.LocalStorage localStorage

<h1>Your calculator</h1>

@foreach ((Expression expression, int index) in Expressions.Select((value, i) => (value, i)))
{
    <div class="row mb-3">
        <div class="col-3 variableName">
            <input type="text" class="form-control @(ExpressionNameIsValid(expression.Name) ? "" : "is-invalid")" bind="@expression.Name" />
        </div>
        <span class="d-flex align-items-center" style="font-size: larger;">=</span>
        <div class="col">
            <input type="text" class="form-control" bind="@expression.Value" />
        </div>
        <button class="btn btn-danger" onclick="@(() => RemoveExpression(index))">
            <span class="oi oi-trash d-flex align-items-center"></span>
        </button>
    </div>
}

<input type="button" class="btn btn-primary" onclick="@AddExpression" value="Add expression" />
<input type="button" class="btn btn-dark" onclick="@SaveLocal" value="Save" />


@functions {      
    private readonly string _key = "expressions";

    protected override async Task OnInitAsync()
    {
        Expressions = (await localStorage.GetItem<Expression[]>(_key)).ToList();
    }

    private List<Expression> Expressions { get; set; } = new List<Expression>();

    private void AddExpression() => Expressions.Add(new Expression());

    private void RemoveExpression(int index) => Expressions.RemoveAt(index);

    private bool ExpressionNameIsValid(string name)
    {
        return (!string.IsNullOrWhiteSpace(name)
            && Expressions.Count(ex => ex.Name == name) == 1);
    }

    private async void SaveLocal()
    {
        await localStorage.SetItem<Expression[]>(_key, Expressions.ToArray());
    }

    private class Expression
    {
        public string Name { get; set; }
        public string Value { get; set; } = "";
    }
}
