@page "/"

<div class="sidebar">
    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">Elle</a>
        <button class="navbar-toggler" onclick="@ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" onclick="@ToggleNavMenu">
        <ul class="nav flex-column">
            @foreach (var item in Calculators)
            {
                <li class="nav-item px-3">
                    <div class="nav-link" onclick="@(() => ActivateCalculator(item))">
                        <span class="oi oi-calculator" aria-hidden="true"></span> @item.Name
                    </div>
                </li>
            }
        </ul>
    </div>
</div>

<div class="main">
    <div class="content px-4">

        <h1>Elle</h1>
        <h5 class="text-muted">The configurable calculator</h5>

        <p>Add expressions (using the "+" button) in the order that they should be evaluated.</p>
        <ul>
            <li>Variable names cannot have spaces</li>
            <li>Variable names are case sensitive</li>
            <li>Only simple operations are supported (+, -, *, /, Math.Pow())</li>
            <li>Results are only calculated when you click "Solve"</li>
            <li>"Save" puts the expressions into your local browser storage</li>
            <li>"Clear" removes all expressions, but does not save the change</li>
        </ul>

        <Calculator Calculator="@ActiveCalculator" />

    </div>
</div>

@functions {
    private List<Models.Calculator> Calculators = new List<Models.Calculator>() {
        new Models.Calculator() {
            Name = "Simple",
            Expressions = new List<Models.Expression>() {
                new Models.Expression() { Name = "a", Value = "3" },
                new Models.Expression() { Name = "b", Value = "4" },
                new Models.Expression() { Name = "c", Value = "2 * a + b" },
            }
        },
        new Models.Calculator() {
            Name = "Circle info",
            Expressions = new List<Models.Expression>() {
                new Models.Expression() { Name = "PI", Value = "3.141592654" },
                new Models.Expression() { Name = "diameter", Value = "3" },
                new Models.Expression() { Name = "radius", Value = "diameter / 2" },
                new Models.Expression() { Name = "perimeter", Value = "diameter * PI" },
                new Models.Expression() { Name = "area", Value = "PI * Math.Pow(radius, 2)" },
            }
        },
    };

    private Models.Calculator ActiveCalculator { get; set; } = new Models.Calculator();

    protected override async Task OnInitAsync()
    {
        ActiveCalculator = Calculators.FirstOrDefault();

        foreach (Models.Calculator calculator in Calculators)
        {
            calculator.Solve();
        }
    }

    private void ActivateCalculator(Models.Calculator calculator)
    {
        ActiveCalculator = calculator;
    }

    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}